#!/bin/sh

# shellcheck disable=SC1090,SC2154

log() {
    printf '\033[1m%s\033[m\n' "$@"
    printf '\n'
}

die() {
    log "$@"
    exit 1
}

exists() {
    command -v "$1" >/dev/null
}

parse_color() {
    printf '%s' "${1#\#*}"
}

generate_xinit() {
xinit_conf="$(cat << CONF
#!/bin/sh

usermodmap=\$HOME/.Xmodmap
sysresources=/etc/X11/xinit/.Xresources
sysmodmap=/etc/X11/xinit/.Xmodmap
if [ -f \$sysresources ]; then
    xrdb -merge \$sysresources
fi
if [ -f \$sysmodmap ]; then
    xmodmap \$sysmodmap
fi
if [ -f "\$usermodmap" ]; then
    xmodmap "\$usermodmap"
fi
if [ -d /etc/X11/xinit/xinitrc.d ] ; then
 for f in /etc/X11/xinit/xinitrc.d/?*.sh ; do
  [ -x "\$f" ] && . "\$f"
 done
 unset f
fi

xset -b off
[[ -f ~/.Xresources ]] && xrdb -merge \$HOME/.Xresources
xsetroot -cursor_name left_ptr

exec i3

CONF
)"

    printf '%s' "$xinit_conf" > "$HOME/.xinitrc"
    hsetroot -solid "$color0"
}

generate_polybar() {
    wm_padding_x=220
    screen_width="$(xrandr --listmonitors | grep \+ | awk '{print $3}' | cut -d/ -f1)"
    polybar_width="$((screen_width - wm_padding_x * 2))"
    active_monitor="$(xrandr --listmonitors | grep \+ | awk '{print $NF}')"
    internal_monitor="$(xrandr | grep "primary" | awk '{print $1}')"

polybar_conf="$(cat << CONF
[global/wm]
    margin-top = 0
    margin-bottom = 0

[settings]
    throttle-output = 5
    throttle-output-for = 10
    throttle-input-for = 30

[bar/slim]
    monitor = $active_monitor
    monitor-fallback = $internal_monitor
    fixed-center = true
    override-redirect = true
    wm-restack = i3

    dpi-x = 0
    dpi-y = 0

    offset-y = 0

    height = 24

    background = $color0
    foreground = $color7

    border-size = 0
    border-color = $color4

    line-size = 1
    line-color = $color4

    padding-left = 0
    padding-right = 0

    module-margin-left = 1
    module-margin-right = 1

    font-0 = "$tpfc:size=$tpsz;3"

[bar/slim-top]
    inherit = bar/slim
    bottom = false

    offset-x = $wm_padding_x
    width = $polybar_width

    modules-left = i3
    modules-right = title

[module/i3]
    type = internal/i3
    format = <label-state>
    index-sort = true
    wrapping-scroll = false
    enable-click = true
    pin-workspaces = true
    strip-wsnumbers = false

    label-focused = %name%
    label-focused-foreground = $color7
    label-focused-background = $color0
    label-focused-underline = $color8
    label-focused-padding = 3

    label-unfocused = %name%
    label-unfocused-foreground = $color7
    label-unfocused-background = $color0
    label-unfocused-padding = 3

    label-urgent = %name%
    label-urgent-foreground = $color1
    label-urgent-background = $color0
    label-urgent-padding = 3

[module/title]
    type = internal/xwindow

    format = <label>

    label = %title%
    label-maxlen = 50
    label-foreground = $color7
    label-background = $color0
    label-underline = $color8
    label-padding = 3

    label-empty = Empty
    label-empty-foreground = $color7
    label-empty-background = $color0
    label-empty-underline = $color8
    label-empty-padding = 3
CONF
)"

    polybar_dir="$HOME/.config/polybar"
    mkdir -pv "$polybar_dir" || die "Failed to create $polybar_dir"
    printf '%s' "$polybar_conf" > "$polybar_dir/config_hax"
}

generate_conky_base() {
conky_base_config="$(cat << CONF
conky.config = {
    alignment = 'top_$1',
    background = true,
    default_color = '$(parse_color "$color7")',
    color0 = '$(parse_color "$color8")',
    color1 = '$(parse_color "$color1")',
    color2 = '$(parse_color "$color2")',
    color3 = '$(parse_color "$color3")',
    color4 = '$(parse_color "$color4")',
    color5 = '$(parse_color "$color5")',
    color6 = '$(parse_color "$color7")',
    cpu_avg_samples = 2,
    diskio_avg_samples = 2,
    double_buffer = true,
    font = '$tpfc:size=$tpsz:style=regular',
    font2 = '$tpfc:size=$tpsz:style=bold',
    draw_shades = false,
    draw_outline = false,
    draw_borders = false,
    draw_graph_borders = false,
    border_inner_margin = 0,
    border_outer_margin = 0,
    border_width = 0,
    stippled_borders = 0,
    pad_percents = 0,
    gap_x = 5,
    gap_y = 0,
    maximum_width = 200,
    minimum_width = 200,
    no_buffers = true,
    out_to_console = false,
    out_to_ncurses = false,
    out_to_stderr = false,
    out_to_x = true,
    own_window = true,
    own_window_type = 'override',
    own_window_transparent = true,
    update_interval = 1,
    use_xft = true,
    uppercase = false,
}
CONF
)"
    printf '%s' "$conky_base_config"
}

generate_conky_left() {
    base_left="$(generate_conky_base "left")"

conky_left="$(cat << CONF
$base_left

conky.text = [[

# DATE
\${color}\${alignc}\${font $tpfc:size=10}\${time %a %b %d}\${font}
\${color0}\${hr}

# SYSTEM
# USERNAME / HOSTNAME
\${font2}\${color1}SYSTEM\${font}
# \${color}USERNAME\
# \${alignr}\${color6}\${user_names}
\${color}HOSTNAME\
\${alignr}\${color5}\${nodename}
# UPTIME / KERNEL
\${color}UPTIME\
\${alignr}\${color3}\${uptime}
\${color}KERNEL\
\${alignr}\${color4}\${kernel}
# LAST UPDATED / PACKAGES
\${color}PACKAGES\
\${alignr}\${color5}\${execi 3600 pacman -Q | wc -l}
\${color}UPDATED\
\${alignr}\${color6}\${execi 3600 ~/.hax/pac.sh}

\${color0}\${hr}

# INFORM
\${font2}\${color1}INFORM\${font}
\${color}VOLUME\
\${alignr}\${color3}\${exec pamixer --get-volume-human}
\${color}MUSIC
\${alignr}\${color5}\${mpd_title}

\${color0}\${hr}

# BATTERY / STATUS
# \${font2}\${color1}BATTERY\${font}
# \${color}PERCENTAGE\
# \${alignr}\${if_match \${battery_percent}>20}\${color2}\${battery_percent}\${else}\${color1}\${battery_percent}\${endif}%
# \${color}STATUS\
# \${alignr}\${color4}\${battery_status}
# STORAGE
\${font2}\${color1}STORAGE\${font}
\${color}USED /\
\${alignr}\${color3}\${fs_used /} of \${fs_size /}
\${color}USED /home\
\${alignr}\${color3}\${fs_used /home} of \${fs_size /home}
\${color}USED /m/files\
\${alignr}\${color3}\${fs_used /media/files} of \${fs_size /media/files}
\${color}TYPE /\
\${alignr}\${color2}\${fs_type /}

\${color0}\${hr}

# MEMORY
\${font2}\${color1}MEMORY USAGE\${font}
\${color}SWAP\
\${alignr}\${color5}\${swap} of \${swapmax}
\${color}RAM\
\${alignr}\${color2}\${mem} of \${memmax}

\${color0}\${hr}

# MEM GRAPH
\${color5}\${memgraph 35,220}

# TOP RAM
\${font2}\${color1}TOP RAM\
\${alignr}\${color0}PID | NAME | RAM\${font}
\${color}\${top_mem pid 1}\${goto 55}\${color4}\${top_mem name 1}\${alignr}\${color5}\${top_mem mem 1}%
\${color}\${top_mem pid 2}\${goto 55}\${color4}\${top_mem name 2}\${alignr}\${color5}\${top_mem mem 2}%
\${color}\${top_mem pid 3}\${goto 55}\${color4}\${top_mem name 3}\${alignr}\${color5}\${top_mem mem 3}%
\${color}\${top_mem pid 4}\${goto 55}\${color4}\${top_mem name 4}\${alignr}\${color5}\${top_mem mem 4}%
\${color}\${top_mem pid 5}\${goto 55}\${color4}\${top_mem name 5}\${alignr}\${color5}\${top_mem mem 5}%
\${color}\${top_mem pid 6}\${goto 55}\${color4}\${top_mem name 6}\${alignr}\${color5}\${top_mem mem 6}%
\${color}\${top_mem pid 7}\${goto 55}\${color4}\${top_mem name 7}\${alignr}\${color5}\${top_mem mem 7}%

\${color0}\${hr}

]];
CONF
)"
    printf '%s' "$conky_left" > "$1/conky_left.lua"
}

generate_conky_right() {
    base_right="$(generate_conky_base "right")"

conky_right="$(cat << CONF
$base_right

conky.text = [[

# TIME
\${color}\${alignc}\${font $tpfc:size=10}\${time %H:%M:%S}\${font}
\${color0}\${hr}

# NETWORK
\${font2}\${color1}NETWORK STATUS\${font}
\${color}GATEWAY\
\${alignr}\${color6}\${gw_iface}
\${color}GATEWAY IP\
\${alignr}\${color5}\${gw_ip}
# \${color}MODE\
# \${alignr}\${color4}\${wireless_mode $wrls}
# \${color}ACCESS POINT\
# \${alignr}\${color3}\${wireless_ap $wrls}
# \${color}ESSID\
# \${alignr}\${if_match "\${wireless_essid $wrls}"=="off/any"}\${color1}disconnected\${else}\${color2}\${wireless_essid $wrls}\${endif}
# \${color}PUBLIC IP\
# \${alignr}\${color6}\${execi 60 curl ipinfo.io/ip}
\${color}LOCAL IP\
\${alignr}\${color4}\${addrs $wrls}

\${color0}\${hr}

\${font2}\${color1}NETWORK TRAFFIC\${font}
\${color}DOWN\
\${alignr}\${color6}\${downspeedf $wrls} KiB/s (\${totaldown $wrls})
\${downspeedgraph $wrls 50,220}

\${color}UP\
\${alignr}\${color6}\${upspeedf $wrls} KiB/s (\${totalup $wrls})
\${upspeedgraph $wrls 50,220}

# CPU USAGE
\${font2}\${color1}CPU USAGE\${font}
\${color}PERCENTAGE\
\${alignr}\${color3}\${cpu}%
\${color}PROCESSES\
\${alignr}\${color4}\${processes}

\${color0}\${hr}

# CPU FREQ/GRAPH
\${font2}\${color1}CPU FREQ\
\${alignr}\${freq_g}GHz\${font}
\${color5}\${loadgraph 70,220}

# TOP CPU
\${font2}\${color1}TOP CPU\
\${alignr}\${color0}PID | NAME | CPU\${font}
\${color}\${top pid 1}\${goto 55}\${color4}\${top name 1}\${alignr}\${color5}\${top cpu 1}%
\${color}\${top pid 2}\${goto 55}\${color4}\${top name 2}\${alignr}\${color5}\${top cpu 2}%
\${color}\${top pid 3}\${goto 55}\${color4}\${top name 3}\${alignr}\${color5}\${top cpu 3}%
\${color}\${top pid 4}\${goto 55}\${color4}\${top name 4}\${alignr}\${color5}\${top cpu 4}%
\${color}\${top pid 5}\${goto 55}\${color4}\${top name 5}\${alignr}\${color5}\${top cpu 5}%
\${color}\${top pid 6}\${goto 55}\${color4}\${top name 6}\${alignr}\${color5}\${top cpu 6}%
\${color}\${top pid 7}\${goto 55}\${color4}\${top name 7}\${alignr}\${color5}\${top cpu 7}%

\${color0}\${hr}

]];
CONF
)"
    printf '%s' "$conky_right" > "$1/conky_right.lua"
}

generate_conky() {
    conky_dir="$HOME/.config/conky"
    mkdir -pv "$conky_dir" || die "Failed to create $conky_dir"

    generate_conky_left "$conky_dir"
    generate_conky_right "$conky_dir"
}

generate_i3() {
i3_conf="$(cat << CONF
set \$mod Mod4
set \$mod1 Mod1

# Font
font pango:$tpfc $tpsz

# Gaps
gaps inner 3
gaps top 26
gaps left 207
gaps right 207
gaps bottom 0

# Borders

for_window [class=".*"] border pixel 1

set \$borderFocused   $color8
set \$borderUnfocused $color3

#                        Border            Background        Foreground        Indicator         Child Border
client.focused           \$borderFocused    \$borderFocused    \$borderFocused    \$borderFocused    \$borderFocused
client.unfocused         \$borderUnfocused  \$borderUnfocused  \$borderUnfocused  \$borderUnfocused  \$borderUnfocused
client.focused_inactive  \$borderUnfocused  \$borderUnfocused  \$borderUnfocused  \$borderUnfocused  \$borderUnfocused
client.urgent            \$borderFocused    \$borderFocused    \$borderFocused    \$borderFocused    \$borderFocused

# Focus
focus_follows_mouse no

# Use Mouse+\$mod to drag floating windows to their wanted position
floating_modifier \$mod

###################
#### AUTOSTART ####
###################

exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1
exec --no-startup-id gnome-keyring-daemon --start --components=pkcs11,secrets
exec --no-startup-id setxkbmap -layout $kbdl -option "grp:win_space_toggle,grp_led:scroll" -option "compose:ralt"
exec --no-startup-id urxvtd -q -o -f
exec --no-startup-id unclutter --timeout 2
exec --no-startup-id greenclip daemon
exec --no-startup-id xfce4-power-manager
exec --no-startup-id numlockx on
exec --no-startup-id redshift -c ~/.config/redshift.conf

exec_always --no-startup-id hsetroot -solid "$color0"
exec_always --no-startup-id dunst
exec_always --no-startup-id xsettingsd

# Launch popup terminal on i3 startup
for_window [instance="popup"] floating enable
for_window [instance="popup"] move scratchpad
exec --no-startup-id $tmnl -name popup

# Start conky
exec_always --no-startup-id \$HOME/.hax/conky.sh

# Start polybar
exec_always --no-startup-id \$HOME/.hax/polybar.sh

################
#### ASSIGN ####
################

# Place these in workspace 2
assign [class="(?i)firefox"] 2
assign [class="(?i)chromium"] 2
assign [class="(?i)surf"] 2

# Place these in workspace 3
assign [class="(?i)Subl3"] 3

# Place these in workspace 4
assign [class="(?i)TelegramDesktop"] 4

## Specific window
for_window [window_role="pop-up|bubble|task_dialog|Preferences|setup"] floating enable
for_window [window_type="dialog|menu"] floating enable
for_window [window_role="browser|GtkFileChooserDialog"] resize set 800 600, move position center
for_window [class="(?i)simplescreenrecorder"] floating enable, move position 5 30
for_window [class="(?i)nitrogen|engrampa|file-roller|fsearch|qt5ct"] floating enable, resize set 600 500, move position center
for_window [class="(?i)atril|pavucontrol|lxappearance|viewnior|keepassxc|veracrypt"] floating enable
for_window [title="(?i)m_sticky"] floating enable, resize set 350 250, sticky enable, move window to position 1000 85

# for_window [title="(?i)htop"] floating enable, resize set 1280 600, move position center, focus
# for_window [class="(?i)firefox|xfce4-terminal|thunar|subl3|mousepad"] focus
# for_window [window_role="demo"] move window to scratchpad, scratchpad show, floating enable, border pixel 0, resize set 1366 250, move absolute position 0 518
# for_window [class="(?i)demo"] move window to scratchpad, scratchpad show, floating enable, border pixel 0, resize set 1366 350, move absolute position 0 418

############
#### i3 ####
############

# Reload the configuration file
bindsym \$mod+Shift+c reload

# Restart i3 inplace (preserves your layout/session, can be used to upgrade i3)
bindsym \$mod+Shift+r restart

# Exit i3 (logs you out of your X session)
bindsym \$mod+Shift+e exec "i3-nagbar -t warning -m 'You pressed the exit shortcut. Do you really want to exit i3? This will end your X session.' -B 'Yes, exit i3' 'i3-msg exit'"

##################
#### TERMINAL ####
##################

# Launch new terminal window
bindsym \$mod+Return exec --no-startup-id $tmnl

# Toggle popup terminal
bindsym \$mod+p exec --no-startup-id \$HOME/.hax/popup.sh

#################
#### GENERAL ####
#################

# Kill focused window
bindsym \$mod+z kill

# Lock screen
# bindsym \$mod+Shift+x exec i3lock -c "$color0"
bindsym \$mod+\$mod1+l exec --no-startup-id "\$HOME/.bin/multilock.sh -l blur"

######################
#### APPLICATIONS ####
######################

# Launch chrome browser
bindsym \$mod1+w exec --no-startup-id chromium

# Launch chrome browser
bindsym \$mod+Control+f exec --no-startup-id firefox

# Launch spotify
bindsym \$mod+Control+s exec --no-startup-id spotify

# Launch surf browser
bindsym \$mod+Control+u exec --no-startup-id surf

# Launch postman
bindsym \$mod+Control+p exec --no-startup-id postman

# Launch gimp
bindsym \$mod+Control+g exec --no-startup-id gimp

# Launch inkscape
bindsym \$mod+Control+i exec --no-startup-id inkscape

###############
#### UTILS ####
###############

bindsym \$mod+\$mod1+Delete exec \$HOME/.bin/power

# Take screenshot
bindsym Print exec --no-startup-id "\$HOME/.bin/flameshot.sh -c"
bindsym \$mod+Print exec --no-startup-id "flameshot gui"
bindsym Control+Print exec --no-startup-id "\$HOME/.bin/flameshot.sh -d 3000"

# Launch dmenu
# bindsym \$mod+d exec dmenu_run -i -p "Launch: " -nb "$color0" -nf "$color7" -sb "$color0" -sf "$color8" -fn "$(printf '%s' "$tpfc" | tr '[:upper:]' '[:lower:]' | tr -d '[:space:]')-$tpsz"

bindsym \$mod+d exec rofi -show drun
bindsym \$mod+\$mod1+g exec \$HOME/.bin/rofi-totp

bindsym Control+\$mod1+h exec rofi -modi "clipboard:greenclip print" -show clipboard -run-command '{cmd}' -width 500 -lines 18 -font "$tpfc $tpsz"

#################################
#### WORKSPACES & NAVIGATION ####
#################################

# Change focus
bindsym \$mod+h focus left
bindsym \$mod+j focus down
bindsym \$mod+k focus up
bindsym \$mod+l focus right

# Move focused window
bindsym \$mod+Shift+h move left
bindsym \$mod+Shift+j move down
bindsym \$mod+Shift+k move up
bindsym \$mod+Shift+l move right

# split in horizontal orientation
bindsym \$mod+b split h

# split in vertical orientation
bindsym \$mod+v split v

# enter fullscreen mode for the focused container
bindsym \$mod+f fullscreen toggle

# change container layout (stacked, tabbed, toggle split)
# bindsym \$mod+s layout stacking
# bindsym \$mod+w layout tabbed
bindsym \$mod+e layout toggle split

# change focus between tiling / floating windows
bindsym Control+space focus mode_toggle

# toggle tiling / floating
bindsym \$mod1+space floating toggle

# focus the parent container
# bindsym \$mod+a focus parent

# focus the child container
# bindsym \$mod+d focus child

# resize window (you can also use the mouse for that)
mode "resize" {
    # These bindings trigger as soon as you enter the resize mode

    # Pressing left will shrink the window’s width.
    # Pressing right will grow the window’s width.
    # Pressing up will shrink the window’s height.
    # Pressing down will grow the window’s height.
    bindsym j resize shrink width 10 px or 10 ppt
    bindsym k resize grow height 10 px or 10 ppt
    bindsym l resize shrink height 10 px or 10 ppt
    bindsym semicolon resize grow width 10 px or 10 ppt

    # same bindings, but for the arrow keys
    bindsym Left resize shrink width 10 px or 10 ppt
    bindsym Down resize grow height 10 px or 10 ppt
    bindsym Up resize shrink height 10 px or 10 ppt
    bindsym Right resize grow width 10 px or 10 ppt

    # back to normal: Enter or Escape
    bindsym Return mode "default" notify-send "Exit resize mode"
    bindsym Escape mode "default" notify-send "Exit resize mode"
}

bindsym \$mod+r mode "resize" notify-send "Enter resize mode"

# define names for default workspaces for which we configure key bindings later on.
set \$ws1 "1"
set \$ws2 "2"
set \$ws3 "3"
set \$ws4 "4"
set \$ws5 "5"
set \$ws6 "6"
set \$ws7 "7"
set \$ws8 "8"
set \$ws9 "9"

# switch to workspace
bindsym \$mod+1 workspace \$ws1
bindsym \$mod+2 workspace \$ws2
bindsym \$mod+3 workspace \$ws3
bindsym \$mod+4 workspace \$ws4
bindsym \$mod+5 workspace \$ws5
bindsym \$mod+6 workspace \$ws6
bindsym \$mod+7 workspace \$ws7
bindsym \$mod+8 workspace \$ws8
bindsym \$mod+9 workspace \$ws9

# move focused container to workspace
bindsym \$mod+Shift+1 move container to workspace \$ws1
bindsym \$mod+Shift+2 move container to workspace \$ws2
bindsym \$mod+Shift+3 move container to workspace \$ws3
bindsym \$mod+Shift+4 move container to workspace \$ws4
bindsym \$mod+Shift+5 move container to workspace \$ws5
bindsym \$mod+Shift+6 move container to workspace \$ws6
bindsym \$mod+Shift+7 move container to workspace \$ws7
bindsym \$mod+Shift+8 move container to workspace \$ws8
bindsym \$mod+Shift+9 move container to workspace \$ws9

############################
#### ACTION KEYBINDINGS ####
############################

# Resize focused window
bindsym \$mod+Control+h resize shrink width 1 px or 1 ppt
bindsym \$mod+Control+j resize shrink height 1 px or 1 ppt
bindsym \$mod+Control+k resize grow height 1 px or 1 ppt
bindsym \$mod+Control+l resize grow width 1 px or 1 ppt

# Screen brightness controls
bindsym XF86MonBrightnessUp exec xbacklight -inc 5
bindsym XF86MonBrightnessDown exec xbacklight -dec 5

# audio controls
bindsym XF86AudioPlay exec mpc toggle
bindsym XF86AudioStop exec mpc stop
bindsym XF86AudioPrev exec mpc prev
bindsym XF86AudioNext exec mpc next
bindsym XF86AudioMute exec pamixer -t
bindsym XF86AudioLowerVolume exec pamixer -d 5
bindsym XF86AudioRaiseVolume exec pamixer -i 5
CONF
)"
    i3_dir="$HOME/.config/i3"
    mkdir -pv "$i3_dir" || die "Failed to create $i3_dir"
    printf '%s' "$i3_conf" > "$i3_dir/config"
}

usage() {
    die "${0##*/}: Generate a zero-config Hacky Hackpecker setup" \
        "Usage: ${0##*/}, ${0##*/} [options]" \
        "    -k set keyboard layout (defaults to 'us,ru')" \
        "    -w set wifi card for conky (defaults to 'enp2s5')" \
        "    -f set font family (defaults to 'Ubuntu')" \
        "    -s set font size (defaults to '9')" \
        "    -t set terminal for i3 (defaults to 'urxvt')" \
        "    -c theme" \
        "    -l use light theme" \
        "    -h show this information" \
        "" \
        "Example: ${0##*/} -k \"us\" -w \"wlan0\" -f \"Fira Code\" -s \"14\" -t \"st\" -p \"stingray\""
}

args() {
    mode="dark"
    kbdl="us,ru"
    wrls="enp2s5"
    tpfc="Ubuntu"
    tpsz="9"
    tmnl="urxvt"

    while getopts k:w:f:s:t:c:l:h opt; do case $opt in
        k) kbdl=$OPTARG ;;
        w) wrls=$OPTARG ;;
        f) tpfc=$OPTARG ;;
        s) tpsz=$OPTARG ;;
        t) tmnl=$OPTARG ;;
        c) cprt=$OPTARG ;;
        l) mode="light" ;;
        *) usage ;;
    esac; done

    if [ "$mode" = "dark" ]; then
        if [ "$cprt" ]; then
            cpr -s "$cprt"
        else
            cpr
        fi
    else
        if [ "$cprt" ]; then
            cpr -ls "$cprt"
        else
            cpr -l
        fi
    fi

    . ~/.cache/cpr/colors

    generate_xinit
    generate_polybar
    generate_conky
    generate_i3

    xrdb -merge "$HOME/.Xresources"

    if [ "$(pgrep -x i3)" ]; then
        i3-msg restart >/dev/null
    else
        log "Warning: 'i3' is not running." \
            "Reboot or restart 'X' or start 'i3' for changes to take effect."
    fi
}

main() {
    exists "i3" || die "'i3wm' is not installed."
    exists "polybar" || die "'polybar' is not installed."
    exists "conky" || die "'conky' is not installed."

    exists "cpr" || {
        die "'cpr' is not installed." \
            "Install it from: https://github.com/fehawen/cpr"
    }

    exists "pamixer" || {
        log "Warning: 'pamixer' is not installed." \
            "'conky' needs it for volume details." \
            "Either install it or change the config to use something else."
    }

    exists "xbacklight" || {
        log "Warning: 'xbacklight' is not installed." \
            "'conky' needs it for screen brightness details." \
            "Either install it or change the config to use something else."
    }

    exists "pacman" || {
        log "Warning: 'pacman' is not installed." \
            "'conky' and '~/.hax/pac.sh' needs it for package details." \
            "Change the config and scripts to use your package manager instead."
    }

    args "$@"
}

main "$@"
